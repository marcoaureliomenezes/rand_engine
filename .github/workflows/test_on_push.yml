name: Tests on Push

on:
  push:
    branches-ignore:
      - master
      - development

jobs:
  # Skip if PR exists (will run in pr_to_development.yml instead)
  check_pr:
    name: Check if PR exists
    runs-on: ubuntu-latest
    outputs:
      has_pr: ${{ steps.check.outputs.has_pr }}
    steps:
      - name: Check for open PR
        id: check
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          PR_COUNT=$(gh pr list --repo ${{ github.repository }} --head ${{ github.ref_name }} --json number --jq length)
          if [ "$PR_COUNT" -gt 0 ]; then
            echo "has_pr=true" >> $GITHUB_OUTPUT
            echo "⏭️  Skipping - PR exists for this branch"
          else
            echo "has_pr=false" >> $GITHUB_OUTPUT
            echo "✅ No PR - running tests"
          fi

  test:
    name: Run Tests (Python ${{ matrix.python-version }} on ${{ matrix.os }})
    needs: check_pr
    if: needs.check_pr.outputs.has_pr == 'false'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12']
        # Note: Spark tests automatically skip on Windows + Python 3.12 (worker crashes)
        # This is handled in tests/fixtures/f5_spark_fixtures.py
        # All other tests run normally on all combinations
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install Poetry (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
        shell: bash
      
      - name: Install Poetry (Windows)
        if: runner.os == 'Windows'
        run: |
          (Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | python -
          echo "$env:APPDATA\Python\Scripts" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: powershell
      
      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/AppData/Local/pypoetry/Cache
            ~/Library/Caches/pypoetry
          key: ${{ runner.os }}-poetry-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-${{ matrix.python-version }}-
      
      - name: Install dependencies
        run: |
          poetry install --with test --no-interaction
      
      - name: Set JAVA_HOME (Windows - for Spark compatibility)
        if: runner.os == 'Windows'
        run: |
          echo "JAVA_HOME=$env:JAVA_HOME" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "Java version:"
          java -version
        shell: powershell
      
      - name: Run tests
        run: |
          poetry run pytest tests/ -v --cov=rand_engine --cov-report=term-missing
      
      - name: Test summary
        if: always()
        run: |
          echo "✅ Tests completed for Python ${{ matrix.python-version }} on ${{ matrix.os }}"

  # Summary job
  summary:
    name: Test Summary
    needs: [check_pr, test]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Generate Test Summary
        run: |
          BRANCH="${{ github.ref_name }}"
          HAS_PR="${{ needs.check_pr.outputs.has_pr }}"
          
          echo "# 🧪 Test Results - Feature Branch" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Branch Info
          echo "## 📋 Branch Information" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Item | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Branch** | \`$BRANCH\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Commit** | \`${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Author** | @${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Commit Message** | ${{ github.event.head_commit.message }} |" >> $GITHUB_STEP_SUMMARY
          
          if [ "$HAS_PR" == "true" ]; then
            echo "| **PR Status** | ⏭️ PR exists - tests skipped (will run on PR) |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| **PR Status** | ✅ No PR - tests executed |" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Test Results
          if [ "$HAS_PR" == "false" ]; then
            echo "## 🔄 Test Execution Status" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| OS | Python 3.10 | Python 3.11 | Python 3.12 |" >> $GITHUB_STEP_SUMMARY
            echo "|---------|-------------|-------------|-------------|" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ needs.test.result }}" == "success" ]; then
              echo "| 🐧 Linux | ✅ Passed | ✅ Passed | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
              echo "| 🪟 Windows | ✅ Passed | ✅ Passed | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
              echo "| 🍎 macOS | ✅ Passed | ✅ Passed | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| 🐧 Linux | ${{ contains(needs.test.result, 'failure') && '❌ Failed' || '✅ Passed' }} | ${{ contains(needs.test.result, 'failure') && '❌ Failed' || '✅ Passed' }} | ${{ contains(needs.test.result, 'failure') && '❌ Failed' || '✅ Passed' }} |" >> $GITHUB_STEP_SUMMARY
              echo "| 🪟 Windows | ${{ contains(needs.test.result, 'failure') && '❌ Failed' || '✅ Passed' }} | ${{ contains(needs.test.result, 'failure') && '❌ Failed' || '✅ Passed' }} | ${{ contains(needs.test.result, 'failure') && '❌ Failed' || '✅ Passed' }} |" >> $GITHUB_STEP_SUMMARY
              echo "| 🍎 macOS | ${{ contains(needs.test.result, 'failure') && '❌ Failed' || '✅ Passed' }} | ${{ contains(needs.test.result, 'failure') && '❌ Failed' || '✅ Passed' }} | ${{ contains(needs.test.result, 'failure') && '❌ Failed' || '✅ Passed' }} |" >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Total Test Combinations:** 9 (3 OS × 3 Python versions)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Next Steps
            echo "## 🎯 Next Steps" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ needs.test.result }}" == "success" ]; then
              echo "✅ **All tests passed!** Your code is ready for the next step:" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### Option 1: Create Pull Request" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
              echo "# Via GitHub CLI" >> $GITHUB_STEP_SUMMARY
              echo "gh pr create --base development --title \"feat: your feature\" --body \"Description\"" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "# Or via GitHub Web UI" >> $GITHUB_STEP_SUMMARY
              echo "# https://github.com/${{ github.repository }}/pull/new/$BRANCH" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### Option 2: Continue Development" >> $GITHUB_STEP_SUMMARY
              echo "- Keep committing to this branch" >> $GITHUB_STEP_SUMMARY
              echo "- Tests will run automatically on each push" >> $GITHUB_STEP_SUMMARY
              echo "- Create PR when ready" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **Tests failed.** Please fix the issues:" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "1. Check the test logs above for details" >> $GITHUB_STEP_SUMMARY
              echo "2. Fix the failing tests locally" >> $GITHUB_STEP_SUMMARY
              echo "3. Run tests locally: \`poetry run pytest tests/ -v\`" >> $GITHUB_STEP_SUMMARY
              echo "4. Commit and push the fixes" >> $GITHUB_STEP_SUMMARY
            fi
            
          else
            # PR exists - skipped
            echo "## ⏭️ Tests Skipped" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Tests were skipped because a Pull Request already exists for this branch." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Why?" >> $GITHUB_STEP_SUMMARY
            echo "To avoid duplicate test runs, tests are only executed in the PR workflow." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Where to find test results?" >> $GITHUB_STEP_SUMMARY
            echo "Check the PR checks: https://github.com/${{ github.repository }}/pulls" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Status message
          if [ "$HAS_PR" == "true" ]; then
            echo "ℹ️ **Workflow completed** - Tests will run on PR validation" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.test.result }}" == "success" ]; then
            echo "✅ **Success!** All tests passed. Ready to create PR to \`development\`." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Action Required!** Fix failing tests before creating PR." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
