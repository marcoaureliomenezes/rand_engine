name: Development - Auto Tag and Publish

on:
  pull_request:
    types: [closed]
    branches:
      - development

jobs:
  auto_tag_and_publish:
    name: Create Pre-Release Tag and Publish
    # Only run if PR was merged (not just closed)
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Extract version from pyproject.toml
        id: extract_version
        run: |
          VERSION=$(grep -E '^version = "[0-9]+\.[0-9]+\.[0-9]+"' pyproject.toml | sed -E 's/version = "(.*)"/\1/')
          if [ -z "$VERSION" ]; then
            echo "❌ Failed to extract version from pyproject.toml"
            exit 1
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Version from pyproject.toml: $VERSION"
      
      - name: Determine pre-release type and increment
        id: prerelease
        run: |
          VERSION="${{ steps.extract_version.outputs.version }}"
          
          if [ -z "$VERSION" ]; then
            echo "❌ VERSION is empty!"
            exit 1
          fi
          
          echo "🔍 Checking existing tags for version: $VERSION"
          
          # Get all existing tags for this version with valid pre-release format
          # Valid formats: X.Y.Za[0-9]+, X.Y.Zb[0-9]+, X.Y.Zrc[0-9]+
          ALL_TAGS=$(git tag -l "${VERSION}*" || echo "")
          
          # Filter only valid pre-release tags
          ALPHA_TAGS=$(echo "$ALL_TAGS" | grep -E "^${VERSION}a[0-9]+$" || echo "")
          BETA_TAGS=$(echo "$ALL_TAGS" | grep -E "^${VERSION}b[0-9]+$" || echo "")
          RC_TAGS=$(echo "$ALL_TAGS" | grep -E "^${VERSION}rc[0-9]+$" || echo "")
          
          echo "📋 Valid pre-release tags found:"
          [ -n "$ALPHA_TAGS" ] && echo "  Alpha: $(echo $ALPHA_TAGS | tr '\n' ' ')"
          [ -n "$BETA_TAGS" ] && echo "  Beta: $(echo $BETA_TAGS | tr '\n' ' ')"
          [ -n "$RC_TAGS" ] && echo "  RC: $(echo $RC_TAGS | tr '\n' ' ')"
          
          # Determine next pre-release type and number
          # Priority: alpha (a) -> beta (b) -> release candidate (rc)
          
          if [ -n "$RC_TAGS" ]; then
            # If rc exists, increment rc
            LATEST_RC=$(echo "$RC_TAGS" | sort -V | tail -1)
            RC_NUM=$(echo "$LATEST_RC" | sed -E "s/^${VERSION}rc([0-9]+)$/\1/")
            NEXT_RC=$((RC_NUM + 1))
            TAG="${VERSION}rc${NEXT_RC}"
            PRERELEASE_TYPE="rc"
          elif [ -n "$BETA_TAGS" ]; then
            # If beta exists but no rc, increment beta
            LATEST_BETA=$(echo "$BETA_TAGS" | sort -V | tail -1)
            BETA_NUM=$(echo "$LATEST_BETA" | sed -E "s/^${VERSION}b([0-9]+)$/\1/")
            NEXT_BETA=$((BETA_NUM + 1))
            TAG="${VERSION}b${NEXT_BETA}"
            PRERELEASE_TYPE="beta"
          elif [ -n "$ALPHA_TAGS" ]; then
            # If alpha exists, increment alpha
            LATEST_ALPHA=$(echo "$ALPHA_TAGS" | sort -V | tail -1)
            ALPHA_NUM=$(echo "$LATEST_ALPHA" | sed -E "s/^${VERSION}a([0-9]+)$/\1/")
            NEXT_ALPHA=$((ALPHA_NUM + 1))
            TAG="${VERSION}a${NEXT_ALPHA}"
            PRERELEASE_TYPE="alpha"
          else
            # No pre-release tags, start with alpha 1
            TAG="${VERSION}a1"
            PRERELEASE_TYPE="alpha"
          fi
          
          if [ -z "$TAG" ]; then
            echo "❌ Failed to determine TAG!"
            exit 1
          fi
          
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "prerelease_type=$PRERELEASE_TYPE" >> $GITHUB_OUTPUT
          echo "🏷️  New tag: $TAG (type: $PRERELEASE_TYPE)"
      
      - name: Create and push tag
        run: |
          TAG="${{ steps.prerelease.outputs.tag }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "$TAG" -m "Pre-release $TAG"
          git push origin "$TAG"
          echo "✅ Tag $TAG created and pushed"
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      
      - name: Build package
        run: |
          poetry build
          echo "📦 Package built successfully"
      
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          verbose: true
      
      - name: Create GitHub Pre-Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.prerelease.outputs.tag }}
          name: "Pre-Release ${{ steps.prerelease.outputs.tag }}"
          body: |
            ## 🚧 Pre-Release ${{ steps.prerelease.outputs.tag }}
            
            **Type:** ${{ steps.prerelease.outputs.prerelease_type }}
            **Branch:** development
            **Commit:** ${{ github.sha }}
            
            ### ⚠️ Warning
            This is a pre-release version. Use at your own risk in production environments.
            
            ### 📦 Installation
            ```bash
            pip install rand-engine==${{ steps.prerelease.outputs.tag }}
            ```
            
            ### 🔗 Links
            - [PyPI Package](https://pypi.org/project/rand-engine/${{ steps.prerelease.outputs.tag }}/)
            - [Documentation](https://github.com/${{ github.repository }})
            - [Changelog](https://github.com/${{ github.repository }}/blob/development/TODOs.md)
          prerelease: true
          draft: false
