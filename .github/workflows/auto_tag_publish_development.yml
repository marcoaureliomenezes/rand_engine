name: Development - Auto Tag and Publish

on:
  pull_request:
    types: [closed]
    branches:
      - development

env:
  PYTHON_VERSION: "3.12"
  PACKAGE_NAME: "rand-engine"

jobs:
  # Job 1: Extract version and determine RC tag
  prepare:
    name: Prepare Release
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
      rc_tag: ${{ steps.determine_rc.outputs.rc_tag }}
      rc_number: ${{ steps.determine_rc.outputs.rc_number }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Extract version from pyproject.toml
        id: extract_version
        run: |
          VERSION=$(grep -E '^version = "[0-9]+\.[0-9]+\.[0-9]+"' pyproject.toml | sed -E 's/version = "(.*)"/\1/')
          if [ -z "$VERSION" ]; then
            echo "❌ Failed to extract version from pyproject.toml"
            exit 1
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Base version from pyproject.toml: $VERSION"
      
      - name: Determine RC tag
        id: determine_rc
        run: |
          VERSION="${{ steps.extract_version.outputs.version }}"
          
          if [ -z "$VERSION" ]; then
            echo "❌ VERSION is empty!"
            exit 1
          fi
          
          echo "🔍 Checking existing RC tags for version: $VERSION"
          
          # Get all RC tags for this version (format: X.Y.Zrc[0-9]+)
          RC_TAGS=$(git tag -l "${VERSION}rc*" | grep -E "^${VERSION}rc[0-9]+$" || echo "")
          
          if [ -n "$RC_TAGS" ]; then
            echo "📋 Existing RC tags found:"
            echo "$RC_TAGS"
            
            # Get latest RC number
            LATEST_RC=$(echo "$RC_TAGS" | sort -V | tail -1)
            RC_NUM=$(echo "$LATEST_RC" | sed -E "s/^${VERSION}rc([0-9]+)$/\1/")
            NEXT_RC=$((RC_NUM + 1))
            RC_TAG="${VERSION}rc${NEXT_RC}"
            echo "📈 Incrementing: $LATEST_RC → $RC_TAG"
          else
            echo "📋 No RC tags found, starting with rc1"
            RC_TAG="${VERSION}rc1"
            NEXT_RC=1
          fi
          
          echo "rc_tag=$RC_TAG" >> $GITHUB_OUTPUT
          echo "rc_number=$NEXT_RC" >> $GITHUB_OUTPUT
          echo "🏷️  Next RC tag: $RC_TAG"

  # Job 2: Run tests
  test:
    name: Run Tests (Python ${{ matrix.python-version }})
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      
      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-${{ matrix.python-version }}-
      
      - name: Install dependencies
        run: |
          poetry install --with test --no-interaction
      
      - name: Run tests with coverage
        run: |
          poetry run pytest tests/ -v --cov=rand_engine --cov-report=xml --cov-report=term-missing
      
      - name: Upload coverage
        if: matrix.python-version == '3.12'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  # Job 3: Build and validate package
  build:
    name: Build Package
    needs: [prepare, test]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      
      - name: Update version to RC
        run: |
          RC_TAG="${{ needs.prepare.outputs.rc_tag }}"
          echo "📝 Updating version to: $RC_TAG"
          poetry version "$RC_TAG"
          
          # Verify version was set correctly
          CURRENT_VERSION=$(poetry version -s)
          echo "✅ Current version in pyproject.toml: $CURRENT_VERSION"
      
      - name: Build package
        run: |
          poetry build
          echo "📦 Package built successfully"
      
      - name: Validate build artifacts
        run: |
          echo "📦 Build artifacts:"
          ls -lh dist/
          
          WHEEL_COUNT=$(ls dist/*.whl 2>/dev/null | wc -l)
          SDIST_COUNT=$(ls dist/*.tar.gz 2>/dev/null | wc -l)
          
          if [ "$WHEEL_COUNT" -eq 0 ] || [ "$SDIST_COUNT" -eq 0 ]; then
            echo "❌ Missing build artifacts!"
            exit 1
          fi
          
          echo "✅ Found $WHEEL_COUNT wheel(s) and $SDIST_COUNT source distribution(s)"
      
      - name: Check package metadata
        run: |
          poetry run pip install twine
          poetry run twine check dist/*
          echo "✅ Package metadata validated"
      
      - name: Test package installation
        run: |
          python -m pip install dist/*.whl
          python -c "
          import rand_engine
          from rand_engine import DataGenerator
          print('✅ Package imported successfully')
          print(f'📦 Version: {rand_engine.__version__ if hasattr(rand_engine, \"__version__\") else \"N/A\"}')
          print(f'✅ Public API verified: DataGenerator available')
          "
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-rc-${{ needs.prepare.outputs.rc_tag }}
          path: dist/
          retention-days: 30

  # Job 4: Create RC tag
  create_tag:
    name: Create RC Tag
    needs: [prepare, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Create and push RC tag
        run: |
          RC_TAG="${{ needs.prepare.outputs.rc_tag }}"
          
          # Check if tag already exists
          if git rev-parse "$RC_TAG" >/dev/null 2>&1; then
            echo "⚠️  Tag $RC_TAG already exists, skipping..."
            exit 0
          fi
          
          git tag -a "$RC_TAG" -m "Release Candidate $RC_TAG

          Pre-release version for testing and validation.
          
          Base version: ${{ needs.prepare.outputs.version }}
          RC number: ${{ needs.prepare.outputs.rc_number }}
          
          Merged PR: #${{ github.event.pull_request.number }}
          Commit: ${{ github.sha }}"
          
          git push origin "$RC_TAG"
          echo "✅ Tag $RC_TAG created and pushed"

  # Job 5: Publish to PyPI
  publish_pypi:
    name: Publish to PyPI (RC)
    needs: [prepare, build, create_tag]
    runs-on: ubuntu-latest
    environment:
      name: development
      url: https://pypi.org/project/${{ env.PACKAGE_NAME }}/${{ needs.prepare.outputs.rc_tag }}/
    permissions:
      id-token: write
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-rc-${{ needs.prepare.outputs.rc_tag }}
          path: dist/
      
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          verbose: true
      
      - name: Verify publication
        run: |
          echo "⏳ Waiting 30s for PyPI indexing..."
          sleep 30
          
          RC_TAG="${{ needs.prepare.outputs.rc_tag }}"
          RESPONSE=$(curl -s https://pypi.org/pypi/${{ env.PACKAGE_NAME }}/json || echo "{}")
          
          if echo "$RESPONSE" | jq -e ".releases[\"$RC_TAG\"]" > /dev/null 2>&1; then
            echo "✅ Version $RC_TAG successfully published to PyPI"
            echo "📦 https://pypi.org/project/${{ env.PACKAGE_NAME }}/$RC_TAG/"
          else
            echo "⚠️  Version not yet indexed (may take a few minutes)"
          fi

  # Job 6: Create GitHub Pre-Release
  create_github_release:
    name: Create GitHub Pre-Release
    needs: [prepare, build, create_tag, publish_pypi]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-rc-${{ needs.prepare.outputs.rc_tag }}
          path: dist/
      
      - name: Generate changelog
        id: changelog
        run: |
          RC_TAG="${{ needs.prepare.outputs.rc_tag }}"
          VERSION="${{ needs.prepare.outputs.version }}"
          
          # Try to find previous RC tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "## 📝 Changes since $PREVIOUS_TAG" > changelog.md
            echo "" >> changelog.md
            git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges >> changelog.md
          else
            echo "## 📝 Changes in this release" > changelog.md
            echo "" >> changelog.md
            git log --pretty=format:"- %s (%h)" --no-merges -10 >> changelog.md
          fi
          
          cat changelog.md
      
      - name: Create GitHub Pre-Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          RC_TAG="${{ needs.prepare.outputs.rc_tag }}"
          VERSION="${{ needs.prepare.outputs.version }}"
          RC_NUM="${{ needs.prepare.outputs.rc_number }}"
          
          gh release create "$RC_TAG" dist/* \
            --title "🟠 Release Candidate v$RC_TAG" \
            --notes "## 🚧 Release Candidate $RC_TAG

          **⚠️  This is a pre-release version for testing and validation purposes.**

          ### 📊 Release Information
          - **Base Version:** $VERSION
          - **RC Number:** $RC_NUM
          - **Branch:** development
          - **Commit:** ${{ github.sha }}
          - **Merged PR:** #${{ github.event.pull_request.number }}

          ### 📦 Installation
          \`\`\`bash
          pip install ${{ env.PACKAGE_NAME }}==$RC_TAG
          \`\`\`

          ### 📝 Changelog
          $(cat changelog.md)

          ### 🔗 Links
          - [PyPI Package](https://pypi.org/project/${{ env.PACKAGE_NAME }}/$RC_TAG/)
          - [Documentation](https://github.com/${{ github.repository }})
          - [Full Changelog](https://github.com/${{ github.repository }}/compare/$VERSION...$RC_TAG)

          ### 🎯 Next Steps
          After validation and approval, this version will be promoted to production as **v$VERSION**.
          " \
            --prerelease \
            --latest=false

  # Job 7: Deployment summary
  summary:
    name: Deployment Summary
    needs: [prepare, test, build, create_tag, publish_pypi, create_github_release]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Generate summary
        run: |
          RC_TAG="${{ needs.prepare.outputs.rc_tag }}"
          VERSION="${{ needs.prepare.outputs.version }}"
          
          echo "# 🟠 Release Candidate Deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Prepare | ${{ needs.prepare.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Create Tag | ${{ needs.create_tag.result == 'success' && '✅ Created' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| PyPI Publish | ${{ needs.publish_pypi.result == 'success' && '✅ Published' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| GitHub Release | ${{ needs.create_github_release.result == 'success' && '✅ Created' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📦 Release Information" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **RC Tag:** \`$RC_TAG\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Base Version:** \`$VERSION\`" >> $GITHUB_STEP_SUMMARY
          echo "- **RC Number:** ${{ needs.prepare.outputs.rc_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **PyPI:** https://pypi.org/project/${{ env.PACKAGE_NAME }}/$RC_TAG/" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub:** https://github.com/${{ github.repository }}/releases/tag/$RC_TAG" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📥 Installation (Testing)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "pip install ${{ env.PACKAGE_NAME }}==$RC_TAG" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🎯 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. Test this RC version thoroughly" >> $GITHUB_STEP_SUMMARY
          echo "2. If approved, create PR: \`development\` → \`master\`" >> $GITHUB_STEP_SUMMARY
          echo "3. After merge to master, version \`$VERSION\` will be published to production" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "> ⚠️  **Note:** This is a pre-release version for testing purposes only." >> $GITHUB_STEP_SUMMARY
