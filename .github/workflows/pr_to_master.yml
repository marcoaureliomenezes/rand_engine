name: PR to Master Validation

on:
  pull_request:
    branches:
      - master
    types: [opened, synchronize, reopened]

jobs:
  validate_source:
    name: Validate PR from Development
    runs-on: ubuntu-latest
    steps:
      - name: Verify source is development
        run: |
          SOURCE_BRANCH="${{ github.head_ref }}"
          if [ "$SOURCE_BRANCH" != "development" ]; then
            echo "❌ PRs to master must come from development branch!"
            echo "Current source: $SOURCE_BRANCH"
            exit 1
          fi
          echo "✅ PR from development branch"

  test:
    name: Run Tests (Python ${{ matrix.python-version }} on ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12']
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install Poetry (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
        shell: bash
      
      - name: Install Poetry (Windows)
        if: runner.os == 'Windows'
        run: |
          (Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | python -
          echo "$env:APPDATA\Python\Scripts" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: powershell
      
      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/AppData/Local/pypoetry/Cache
            ~/Library/Caches/pypoetry
          key: ${{ runner.os }}-poetry-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-${{ matrix.python-version }}-
      
      - name: Install dependencies
        run: |
          poetry install --with test --no-interaction
      
      - name: Run tests with coverage
        run: |
          poetry run pytest tests/ -v --cov=rand_engine --cov-report=xml --cov-report=term-missing
      
      - name: Upload coverage
        if: matrix.python-version == '3.12' && matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  summary:
    name: PR Validation Summary
    needs: [validate_source, test]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check results
        run: |
          if [ "${{ needs.validate_source.result }}" == "success" ] && [ "${{ needs.test.result }}" == "success" ]; then
            echo "✅ All checks passed - PR ready to merge to master"
          else
            echo "❌ Some checks failed"
            exit 1
          fi
