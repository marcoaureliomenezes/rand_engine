name: release

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+a[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+b[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+rc[0-9]+"

env:
  PACKAGE_NAME: "rand-engine"
  OWNER: "marcoaureliomenezes"

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      
      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-${{ matrix.python-version }}-
      
      - name: Install dependencies
        run: poetry install --with test --no-interaction
      
      - name: Run tests with coverage
        run: |
          poetry run pytest tests/ -v --cov=rand_engine --cov-report=xml --cov-report=term-missing
      
      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.12'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  details:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.release.outputs.new_version }}
      suffix: ${{ steps.release.outputs.suffix }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - uses: actions/checkout@v2

      - name: Extract tag and Details
        id: release
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            TAG_NAME=${GITHUB_REF#refs/tags/}
            NEW_VERSION=$(echo $TAG_NAME | awk -F'-' '{print $1}')
            SUFFIX=$(echo $TAG_NAME | grep -oP '[a-z]+[0-9]+' || echo "")
            echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
            echo "suffix=$SUFFIX" >> "$GITHUB_OUTPUT"
            echo "tag_name=$TAG_NAME" >> "$GITHUB_OUTPUT"
            echo "Version is $NEW_VERSION"
            echo "Suffix is $SUFFIX"
            echo "Tag name is $TAG_NAME"
          else
            echo "No tag found"
            exit 1
          fi

  check_pypi:
    needs: [details, test]
    runs-on: ubuntu-latest
    steps:
      - name: Fetch information from PyPI
        run: |
          response=$(curl -s https://pypi.org/pypi/${{ env.PACKAGE_NAME }}/json || echo "{}")
          latest_previous_version=$(echo $response | jq --raw-output "select(.releases != null) | .releases | keys_unsorted | last")
          if [ -z "$latest_previous_version" ]; then
            echo "Package not found on PyPI."
            latest_previous_version="0.0.0"
          fi
          echo "Latest version on PyPI: $latest_previous_version"
          echo "latest_previous_version=$latest_previous_version" >> $GITHUB_ENV

      - name: Compare versions and exit if not newer
        run: |
          NEW_VERSION=${{ needs.details.outputs.new_version }}
          LATEST_VERSION=$latest_previous_version
          if [ "$(printf '%s\n' "$LATEST_VERSION" "$NEW_VERSION" | sort -rV | head -n 1)" != "$NEW_VERSION" ] || [ "$NEW_VERSION" == "$LATEST_VERSION" ]; then
            echo "The new version $NEW_VERSION is not greater than the latest version $LATEST_VERSION on PyPI."
            exit 1
          else
            echo "The new version $NEW_VERSION is greater than the latest version $LATEST_VERSION on PyPI."
          fi

  setup_and_build:
    needs: [details, check_pypi]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Set project version with Poetry
        run: |
          poetry version ${{ needs.details.outputs.new_version }}

      - name: Install dependencies
        run: poetry install --sync --no-interaction

      - name: Build source and wheel distribution
        run: |
          poetry build

      - name: Validate build artifacts
        run: |
          echo "📦 Checking build artifacts..."
          ls -lh dist/
          
          # Verificar que wheel e sdist foram criados
          WHEEL_COUNT=$(ls dist/*.whl 2>/dev/null | wc -l)
          SDIST_COUNT=$(ls dist/*.tar.gz 2>/dev/null | wc -l)
          
          if [ "$WHEEL_COUNT" -eq 0 ] || [ "$SDIST_COUNT" -eq 0 ]; then
            echo "❌ Build artifacts missing!"
            echo "   Wheels found: $WHEEL_COUNT"
            echo "   Source dist found: $SDIST_COUNT"
            exit 1
          fi
          
          echo "✅ Found $WHEEL_COUNT wheel(s) and $SDIST_COUNT source distribution(s)"
          
          # Verificar que versão no arquivo corresponde à tag
          EXPECTED_VERSION="${{ needs.details.outputs.new_version }}"
          WHEEL_FILE=$(ls dist/*.whl | head -n 1)
          
          if echo "$WHEEL_FILE" | grep -q "$EXPECTED_VERSION"; then
            echo "✅ Version match: $EXPECTED_VERSION found in $WHEEL_FILE"
          else
            echo "❌ Version mismatch!"
            echo "   Expected: $EXPECTED_VERSION"
            echo "   Wheel file: $WHEEL_FILE"
            exit 1
          fi
      
      - name: Test package installation
        run: |
          echo "🧪 Testing package installation..."
          python -m pip install dist/*.whl
          
          # Testar import
          python -c "
          import rand_engine
          from rand_engine.data_generator import DataGenerator
          from rand_engine.core import Core
          print('✅ Package imported successfully')
          print(f'   Modules: data_generator, core')
          "
          
          echo "✅ Package installation test passed"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  pypi_publish:
    name: Upload release to PyPI
    needs: [setup_and_build, details]
    runs-on: ubuntu-latest
    environment:
      name: release
    permissions:
      id-token: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
      
      - name: Verify PyPI publication
        run: |
          echo "⏳ Waiting 30s for PyPI indexing..."
          sleep 30
          
          VERSION="${{ needs.details.outputs.tag_name }}"
          echo "🔍 Checking if version $VERSION is available on PyPI..."
          
          # Tentar buscar a versão no PyPI
          RESPONSE=$(curl -s https://pypi.org/pypi/${{ env.PACKAGE_NAME }}/json)
          
          if echo "$RESPONSE" | jq -e ".releases[\"$VERSION\"]" > /dev/null 2>&1; then
            echo "✅ Version $VERSION successfully published to PyPI"
            echo "📦 PyPI URL: https://pypi.org/project/${{ env.PACKAGE_NAME }}/$VERSION/"
          else
            echo "⚠️  Version $VERSION not yet indexed on PyPI (may take a few minutes)"
          fi

  github_release:
    name: Create GitHub Release
    needs: [setup_and_build, details]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Create GitHub Release
        id: create_release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create ${{ needs.details.outputs.tag_name }} dist/* \
            --title "Release ${{ needs.details.outputs.tag_name }}" \
            --generate-notes \
            --notes "## 🚀 Installation
          
          \`\`\`bash
          pip install ${{ env.PACKAGE_NAME }}==${{ needs.details.outputs.tag_name }}
          \`\`\`
          
          **PyPI:** https://pypi.org/project/${{ env.PACKAGE_NAME }}/${{ needs.details.outputs.tag_name }}/
          **GitHub:** https://github.com/${{ env.OWNER }}/${{ env.PACKAGE_NAME }}/releases/tag/${{ needs.details.outputs.tag_name }}
          "

  deployment_summary:
    name: Deployment Summary
    needs: [test, details, setup_and_build, pypi_publish, github_release]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Generate deployment summary
        run: |
          echo "# 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.setup_and_build.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| PyPI Publish | ${{ needs.pypi_publish.result == 'success' && '✅ Published' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| GitHub Release | ${{ needs.github_release.result == 'success' && '✅ Created' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📦 Package Information" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Package:** ${{ env.PACKAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ needs.details.outputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **PyPI:** https://pypi.org/project/${{ env.PACKAGE_NAME }}/${{ needs.details.outputs.tag_name }}/" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Release:** https://github.com/${{ env.OWNER }}/rand_engine/releases/tag/${{ needs.details.outputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📥 Installation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "pip install ${{ env.PACKAGE_NAME }}==${{ needs.details.outputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
      
      - name: Notify on failure
        if: needs.test.result == 'failure' || needs.setup_and_build.result == 'failure' || needs.pypi_publish.result == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const failedSteps = [];
            if ('${{ needs.test.result }}' === 'failure') failedSteps.push('Tests');
            if ('${{ needs.setup_and_build.result }}' === 'failure') failedSteps.push('Build');
            if ('${{ needs.pypi_publish.result }}' === 'failure') failedSteps.push('PyPI Publish');
            
            const issueBody = `## ❌ Deployment Failed for v${{ needs.details.outputs.tag_name }}
            
            **Failed stages:** ${failedSteps.join(', ')}
            
            **Workflow run:** ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}
            
            **Tag:** ${{ needs.details.outputs.tag_name }}
            
            Please check the workflow logs for details.`;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `❌ Deployment failed for v${{ needs.details.outputs.tag_name }}`,
              body: issueBody,
              labels: ['deployment', 'bug', 'ci/cd']
            });